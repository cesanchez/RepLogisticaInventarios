// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200601012325_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("Model.Bodega", b =>
                {
                    b.Property<int>("BodegaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Area")
                        .HasColumnType("REAL");

                    b.Property<double>("Codigo")
                        .HasColumnType("REAL");

                    b.Property<string>("Cprodatiende")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dependencia")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitud")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitud")
                        .HasColumnType("REAL");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnType("TEXT");

                    b.HasKey("BodegaId");

                    b.ToTable("Bodegas");

                    b.HasData(
                        new
                        {
                            BodegaId = 33,
                            Area = 10.0,
                            Codigo = 321.0,
                            Cprodatiende = "Codigo",
                            Dependencia = "Vicepresidencia",
                            Latitud = 74.552999999999997,
                            Longitud = 79.434299999999993,
                            Nombre = "Bodega 33",
                            Tipo = "Cuarto Frio"
                        });
                });

            modelBuilder.Entity("Model.BodegaRuta", b =>
                {
                    b.Property<int>("RutaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BodegaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RutaId", "BodegaId");

                    b.HasIndex("BodegaId");

                    b.ToTable("BodegaRuta");

                    b.HasData(
                        new
                        {
                            RutaId = 7,
                            BodegaId = 33
                        });
                });

            modelBuilder.Entity("Model.Campo", b =>
                {
                    b.Property<int>("CampoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("CampoId");

                    b.ToTable("Campos");

                    b.HasData(
                        new
                        {
                            CampoId = 1,
                            Nombre = "Campo1"
                        },
                        new
                        {
                            CampoId = 2,
                            Nombre = "Campo2"
                        });
                });

            modelBuilder.Entity("Model.CampoRuta", b =>
                {
                    b.Property<int>("RutaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CampoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RutaId", "CampoId");

                    b.HasIndex("CampoId");

                    b.ToTable("CampoRuta");

                    b.HasData(
                        new
                        {
                            RutaId = 7,
                            CampoId = 1
                        },
                        new
                        {
                            RutaId = 7,
                            CampoId = 2
                        });
                });

            modelBuilder.Entity("Model.CentroLogistico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AreaBodegas")
                        .HasColumnType("REAL");

                    b.Property<double>("AreaCFrios")
                        .HasColumnType("REAL");

                    b.Property<double>("AreaCQuimicos")
                        .HasColumnType("REAL");

                    b.Property<double>("AreaPatios")
                        .HasColumnType("REAL");

                    b.Property<string>("Bodegas")
                        .HasColumnType("TEXT");

                    b.Property<string>("CentrosProdAtiendad")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codigo")
                        .HasColumnType("TEXT");

                    b.Property<string>("CuartosFrios")
                        .HasColumnType("TEXT");

                    b.Property<string>("CuartosQuimicos")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dependencia")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitud")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitud")
                        .HasColumnType("REAL");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patios")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CentroLogisticos");
                });

            modelBuilder.Entity("Model.CentroRuta", b =>
                {
                    b.Property<int>("RutaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CentroLogisticoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RutaId", "CentroLogisticoId");

                    b.HasIndex("CentroLogisticoId");

                    b.ToTable("CentroRuta");
                });

            modelBuilder.Entity("Model.Escenario", b =>
                {
                    b.Property<int>("EscenarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EscenarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Escenarios");

                    b.HasData(
                        new
                        {
                            EscenarioId = 1,
                            FechaCreacion = new DateTime(2020, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Red Actual",
                            UsuarioId = 1122
                        });
                });

            modelBuilder.Entity("Model.Hub", b =>
                {
                    b.Property<int>("HubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("HubId");

                    b.ToTable("Hubs");
                });

            modelBuilder.Entity("Model.HubRuta", b =>
                {
                    b.Property<int>("RutaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HubId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RutaId", "HubId");

                    b.HasIndex("HubId");

                    b.ToTable("HubRuta");
                });

            modelBuilder.Entity("Model.Inventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Alto")
                        .HasColumnType("REAL");

                    b.Property<double>("Ancho")
                        .HasColumnType("REAL");

                    b.Property<int>("BodegaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Campo")
                        .HasColumnType("TEXT");

                    b.Property<double>("CantidadUm")
                        .HasColumnType("REAL");

                    b.Property<string>("CodigoMaterial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("DetieneOperacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaFacturacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImporteMl")
                        .HasColumnType("TEXT");

                    b.Property<double>("Largo")
                        .HasColumnType("REAL");

                    b.Property<string>("ModoAlmacenamiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Moneda")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumPedido")
                        .HasColumnType("TEXT");

                    b.Property<double>("Peso")
                        .HasColumnType("REAL");

                    b.Property<string>("Proveedor")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProveedorCentroSuministrador")
                        .HasColumnType("TEXT");

                    b.Property<double>("SafetyStock")
                        .HasColumnType("REAL");

                    b.Property<double>("Tiempo")
                        .HasColumnType("REAL");

                    b.Property<string>("Tipo")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoCargue")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoTransporte")
                        .HasColumnType("TEXT");

                    b.Property<string>("UbicacionProveedor")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnidadMedida")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BodegaId");

                    b.ToTable("Inventarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alto = 20.0,
                            Ancho = 30.0,
                            BodegaId = 33,
                            Campo = "Código campo",
                            CantidadUm = 10.0,
                            CodigoMaterial = "Código",
                            Data = "Datos",
                            Descripcion = "Descripción",
                            DetieneOperacion = "No",
                            FechaFacturacion = new DateTime(2020, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImporteMl = "Importe ML",
                            Largo = 10.0,
                            ModoAlmacenamiento = "Cuarto frio",
                            Moneda = "COP",
                            NumPedido = "Número pedido",
                            Peso = 15.0,
                            Proveedor = "Proveedor",
                            ProveedorCentroSuministrador = "Centro suministrador",
                            SafetyStock = 100.0,
                            Tiempo = 10.0,
                            Tipo = "Categoria",
                            TipoCargue = "Montacarga",
                            TipoTransporte = "Especializado",
                            UbicacionProveedor = "Ubicación Prov",
                            UnidadMedida = "Unidad"
                        },
                        new
                        {
                            Id = 2,
                            Alto = 20.0,
                            Ancho = 30.0,
                            BodegaId = 33,
                            Campo = "Código campo",
                            CantidadUm = 10.0,
                            CodigoMaterial = "Código",
                            Data = "Datos",
                            Descripcion = "Descripción",
                            DetieneOperacion = "No",
                            FechaFacturacion = new DateTime(2020, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImporteMl = "Importe ML",
                            Largo = 10.0,
                            ModoAlmacenamiento = "Cuarto frio",
                            Moneda = "COP",
                            NumPedido = "Número pedido",
                            Peso = 15.0,
                            Proveedor = "Proveedor",
                            ProveedorCentroSuministrador = "Centro suministrador",
                            SafetyStock = 100.0,
                            Tiempo = 10.0,
                            Tipo = "Categoria",
                            TipoCargue = "Montacarga",
                            TipoTransporte = "Especializado",
                            UbicacionProveedor = "Ubicación Prov",
                            UnidadMedida = "Unidad"
                        });
                });

            modelBuilder.Entity("Model.Ruta", b =>
                {
                    b.Property<int>("RutaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EscenarioId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("RutaId");

                    b.HasIndex("EscenarioId")
                        .IsUnique();

                    b.ToTable("Rutas");

                    b.HasData(
                        new
                        {
                            RutaId = 7,
                            EscenarioId = 1,
                            Nombre = "Blanco-y-Negro7"
                        });
                });

            modelBuilder.Entity("Model.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            UsuarioId = 1122,
                            Nombre = "Usuario Principal"
                        });
                });

            modelBuilder.Entity("Model.BodegaRuta", b =>
                {
                    b.HasOne("Model.Bodega", "Bodega")
                        .WithMany("BodegaRutas")
                        .HasForeignKey("BodegaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Ruta", "Ruta")
                        .WithMany("BodegaRutas")
                        .HasForeignKey("RutaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.CampoRuta", b =>
                {
                    b.HasOne("Model.Campo", "Campo")
                        .WithMany("CampoRutas")
                        .HasForeignKey("CampoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Ruta", "Ruta")
                        .WithMany("CampoRutas")
                        .HasForeignKey("RutaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.CentroRuta", b =>
                {
                    b.HasOne("Model.CentroLogistico", "CentroLogistico")
                        .WithMany("CentroRutas")
                        .HasForeignKey("CentroLogisticoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Ruta", "Ruta")
                        .WithMany("CentroRutas")
                        .HasForeignKey("RutaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Escenario", b =>
                {
                    b.HasOne("Model.Usuario", "Usuario")
                        .WithMany("Escenarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.HubRuta", b =>
                {
                    b.HasOne("Model.Hub", "Hub")
                        .WithMany("HubRutas")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Ruta", "Ruta")
                        .WithMany("HubRutas")
                        .HasForeignKey("RutaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Inventario", b =>
                {
                    b.HasOne("Model.Bodega", "Bodega")
                        .WithMany("Inventarios")
                        .HasForeignKey("BodegaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Ruta", b =>
                {
                    b.HasOne("Model.Escenario", "Escenario")
                        .WithOne("Ruta")
                        .HasForeignKey("Model.Ruta", "EscenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
